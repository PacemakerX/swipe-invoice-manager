{"ast":null,"code":"var _jsxFileName = \"/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport * as XLSX from \"xlsx\"; // For handling Excel files\nimport pdfParse from \"pdf-parse\"; // For handling PDF files\nimport Tesseract from \"tesseract.js\"; // For handling image files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUpload() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Function to handle file selection\n  const handleFileChange = e => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setError(\"\");\n    }\n  };\n\n  // Function to handle file upload\n  const handleFileUpload = () => {\n    if (!file) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n    const fileType = file.type;\n    if (fileType === \"application/pdf\") {\n      handlePdfUpload(file);\n    } else if (fileType === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n      handleExcelUpload(file);\n    } else if (fileType.startsWith(\"image/\")) {\n      handleImageUpload(file);\n    } else {\n      setError(\"Unsupported file type.\");\n    }\n  };\n\n  // Function to handle PDF file upload\n  const handlePdfUpload = file => {\n    const reader = new FileReader();\n    reader.onload = async e => {\n      try {\n        const pdfText = await pdfParse(e.target.result);\n        setData(pdfText.text);\n      } catch (err) {\n        setError(\"Error reading PDF file.\");\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  // Function to handle Excel file upload\n  const handleExcelUpload = file => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const workbook = XLSX.read(e.target.result, {\n        type: \"array\"\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      setData(jsonData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  // Function to handle image file upload (OCR using Tesseract)\n  const handleImageUpload = file => {\n    Tesseract.recognize(file, \"eng\", {\n      logger: m => console.log(m)\n    }).then(({\n      data: {\n        text\n      }\n    }) => {\n      setData(text);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload your invoice file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formFile\",\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"file\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleFileUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Extracted Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(data, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"d3fDy0iZOd5qSGIWTuQF/66ufwc=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Button","Form","XLSX","pdfParse","Tesseract","jsxDEV","_jsxDEV","FileUpload","_s","file","setFile","data","setData","error","setError","handleFileChange","e","uploadedFile","target","files","handleFileUpload","fileType","type","handlePdfUpload","handleExcelUpload","startsWith","handleImageUpload","reader","FileReader","onload","pdfText","result","text","err","readAsArrayBuffer","workbook","read","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","recognize","logger","m","console","log","then","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Control","onChange","variant","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport * as XLSX from \"xlsx\"; // For handling Excel files\nimport pdfParse from \"pdf-parse\"; // For handling PDF files\nimport Tesseract from \"tesseract.js\"; // For handling image files\n\nfunction FileUpload() {\n  const [file, setFile] = useState(null);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Function to handle file selection\n  const handleFileChange = (e) => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setError(\"\");\n    }\n  };\n\n  // Function to handle file upload\n  const handleFileUpload = () => {\n    if (!file) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n\n    const fileType = file.type;\n\n    if (fileType === \"application/pdf\") {\n      handlePdfUpload(file);\n    } else if (fileType === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n      handleExcelUpload(file);\n    } else if (fileType.startsWith(\"image/\")) {\n      handleImageUpload(file);\n    } else {\n      setError(\"Unsupported file type.\");\n    }\n  };\n\n  // Function to handle PDF file upload\n  const handlePdfUpload = (file) => {\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      try {\n        const pdfText = await pdfParse(e.target.result);\n        setData(pdfText.text);\n      } catch (err) {\n        setError(\"Error reading PDF file.\");\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  // Function to handle Excel file upload\n  const handleExcelUpload = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const workbook = XLSX.read(e.target.result, { type: \"array\" });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      setData(jsonData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  // Function to handle image file upload (OCR using Tesseract)\n  const handleImageUpload = (file) => {\n    Tesseract.recognize(file, \"eng\", {\n      logger: (m) => console.log(m),\n    }).then(({ data: { text } }) => {\n      setData(text);\n    });\n  };\n\n  return (\n    <div className=\"file-upload\">\n      <h3>Upload your invoice file</h3>\n      <Form>\n        <Form.Group controlId=\"formFile\" className=\"mb-3\">\n          <Form.Control type=\"file\" onChange={handleFileChange} />\n        </Form.Group>\n        <Button variant=\"primary\" onClick={handleFileUpload}>\n          Upload\n        </Button>\n      </Form>\n\n      {error && <p className=\"text-danger\">{error}</p>}\n\n      {data && (\n        <div className=\"mt-4\">\n          <h4>Extracted Data:</h4>\n          <pre>{JSON.stringify(data, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}