{"ast":null,"code":"var _jsxFileName = \"/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from '../store/actions'; // Correct path\nimport { getDocument, GlobalWorkerOptions } from 'pdfjs-dist';\n\n// Set the worker for pdfjs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\nconst FileUpload = () => {\n  _s();\n  const dispatch = useDispatch();\n  const handleFileChange = e => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      dispatch(setMessage(`File \"${uploadedFile.name}\" selected.`));\n      handlePdfParse(uploadedFile);\n    } else {\n      dispatch(setMessage('No file selected.'));\n    }\n  };\n  const handleFileUpload = () => {\n    dispatch(setMessage('Uploading file...'));\n    // Add logic for actual file upload if needed\n  };\n  const handlePdfParse = file => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const typedArray = new Uint8Array(fileReader.result);\n\n      // Use pdfjs to parse the file\n      getDocument(typedArray).promise.then(pdf => {\n        // Get text from the first page\n        pdf.getPage(1).then(page => {\n          page.getTextContent().then(textContent => {\n            let text = '';\n            textContent.items.forEach(item => {\n              text += item.str + ' ';\n            });\n\n            // Here, you can handle the extracted text (e.g., save to store or show in UI)\n            dispatch(setMessage(`PDF text: ${text.slice(0, 100)}...`)); // Show first 100 characters as an example\n          });\n        });\n      }).catch(error => {\n        dispatch(setMessage(`Error parsing PDF: ${error.message}`));\n      });\n    };\n    fileReader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card p-4\",\n    style: {\n      borderRadius: '15px',\n      backgroundColor: '#f8f9fa'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"text-center mb-3\",\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary w-100\",\n      onClick: handleFileUpload,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useDispatch","setMessage","getDocument","GlobalWorkerOptions","jsxDEV","_jsxDEV","workerSrc","pdfjs","version","FileUpload","_s","dispatch","handleFileChange","e","uploadedFile","target","files","name","handlePdfParse","handleFileUpload","file","fileReader","FileReader","onload","typedArray","Uint8Array","result","promise","then","pdf","getPage","page","getTextContent","textContent","text","items","forEach","item","str","slice","catch","error","message","readAsArrayBuffer","className","style","borderRadius","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from '../store/actions'; // Correct path\nimport { getDocument, GlobalWorkerOptions } from 'pdfjs-dist';\n\n// Set the worker for pdfjs\nGlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n\nconst FileUpload = () => {\n  const dispatch = useDispatch();\n  \n  const handleFileChange = (e) => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      dispatch(setMessage(`File \"${uploadedFile.name}\" selected.`));\n      handlePdfParse(uploadedFile);\n    } else {\n      dispatch(setMessage('No file selected.'));\n    }\n  };\n\n  const handleFileUpload = () => {\n    dispatch(setMessage('Uploading file...'));\n    // Add logic for actual file upload if needed\n  };\n\n  const handlePdfParse = (file) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      const typedArray = new Uint8Array(fileReader.result);\n\n      // Use pdfjs to parse the file\n      getDocument(typedArray).promise\n        .then((pdf) => {\n          // Get text from the first page\n          pdf.getPage(1).then((page) => {\n            page.getTextContent().then((textContent) => {\n              let text = '';\n              textContent.items.forEach(item => {\n                text += item.str + ' ';\n              });\n\n              // Here, you can handle the extracted text (e.g., save to store or show in UI)\n              dispatch(setMessage(`PDF text: ${text.slice(0, 100)}...`));  // Show first 100 characters as an example\n            });\n          });\n        })\n        .catch((error) => {\n          dispatch(setMessage(`Error parsing PDF: ${error.message}`));\n        });\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <div className=\"card p-4\" style={{ borderRadius: '15px', backgroundColor: '#f8f9fa' }}>\n      <h4 className=\"text-center mb-3\">File Upload</h4>\n      <div className=\"mb-3\">\n        <input\n          type=\"file\"\n          className=\"form-control\"\n          onChange={handleFileChange}\n        />\n      </div>\n      <button\n        className=\"btn btn-primary w-100\"\n        onClick={handleFileUpload}\n      >\n        Upload File\n      </button>\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}