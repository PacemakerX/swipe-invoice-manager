{"ast":null,"code":"var _jsxFileName = \"/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMessage } from '../store/actions';\nimport pdfjsLib from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const dispatch = useDispatch();\n  const message = useSelector(state => state.message); // Get message from Redux store\n\n  const handleFileChange = async e => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      dispatch(setMessage(`File \"${uploadedFile.name}\" selected.`));\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfUpload(uploadedFile);\n      } else {\n        // Handle non-PDF files\n        dispatch(setMessage('Please upload a PDF file.'));\n      }\n    } else {\n      dispatch(setMessage('No file selected.'));\n    }\n  };\n  const handlePdfUpload = async file => {\n    try {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = async () => {\n        const pdfData = new Uint8Array(fileReader.result);\n        try {\n          const pdf = await pdfjsLib.getDocument(pdfData).promise;\n          const numPages = pdf.numPages;\n          let textContent = '';\n          for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const content = await page.getTextContent();\n            const pageText = content.items.map(item => item.str).join(' ');\n            textContent += pageText + '\\n';\n          }\n          dispatch(setMessage(`PDF parsed successfully with ${numPages} pages.`));\n          // You can store the parsed content or process it further as needed\n          console.log('Parsed PDF text:', textContent);\n        } catch (error) {\n          dispatch(setMessage('Error parsing the PDF file.'));\n          console.error('Error parsing PDF:', error);\n        }\n      };\n      fileReader.onerror = () => {\n        dispatch(setMessage('Error reading the file.'));\n      };\n    } catch (error) {\n      dispatch(setMessage('Error handling the file.'));\n      console.error('Error handling file:', error);\n    }\n  };\n  const handleFileUpload = () => {\n    dispatch(setMessage('Uploading the file...'));\n    // Simulate file upload if needed (you can also integrate actual upload logic)\n    setTimeout(() => {\n      dispatch(setMessage('File uploaded successfully.'));\n    }, 1500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card p-4\",\n    style: {\n      borderRadius: '15px',\n      backgroundColor: '#f8f9fa'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"text-center mb-3\",\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary w-100\",\n      onClick: handleFileUpload,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info mt-3\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"xr1ekS2WppdkvAYqHXA+Iel6VbM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useDispatch","useSelector","setMessage","pdfjsLib","jsxDEV","_jsxDEV","FileUpload","_s","dispatch","message","state","handleFileChange","e","uploadedFile","target","files","name","type","handlePdfUpload","file","fileReader","FileReader","readAsArrayBuffer","onload","pdfData","Uint8Array","result","pdf","getDocument","promise","numPages","textContent","pageNum","page","getPage","content","getTextContent","pageText","items","map","item","str","join","console","log","error","onerror","handleFileUpload","setTimeout","className","style","borderRadius","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMessage } from '../store/actions';\nimport pdfjsLib from 'pdfjs-dist';\n\nconst FileUpload = () => {\n  const dispatch = useDispatch();\n  const message = useSelector((state) => state.message); // Get message from Redux store\n\n  const handleFileChange = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      dispatch(setMessage(`File \"${uploadedFile.name}\" selected.`));\n\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfUpload(uploadedFile);\n      } else {\n        // Handle non-PDF files\n        dispatch(setMessage('Please upload a PDF file.'));\n      }\n    } else {\n      dispatch(setMessage('No file selected.'));\n    }\n  };\n\n  const handlePdfUpload = async (file) => {\n    try {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = async () => {\n        const pdfData = new Uint8Array(fileReader.result);\n        try {\n          const pdf = await pdfjsLib.getDocument(pdfData).promise;\n          const numPages = pdf.numPages;\n\n          let textContent = '';\n          for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const content = await page.getTextContent();\n            const pageText = content.items.map((item) => item.str).join(' ');\n            textContent += pageText + '\\n';\n          }\n\n          dispatch(setMessage(`PDF parsed successfully with ${numPages} pages.`));\n          // You can store the parsed content or process it further as needed\n          console.log('Parsed PDF text:', textContent);\n        } catch (error) {\n          dispatch(setMessage('Error parsing the PDF file.'));\n          console.error('Error parsing PDF:', error);\n        }\n      };\n\n      fileReader.onerror = () => {\n        dispatch(setMessage('Error reading the file.'));\n      };\n    } catch (error) {\n      dispatch(setMessage('Error handling the file.'));\n      console.error('Error handling file:', error);\n    }\n  };\n\n  const handleFileUpload = () => {\n    dispatch(setMessage('Uploading the file...'));\n    // Simulate file upload if needed (you can also integrate actual upload logic)\n    setTimeout(() => {\n      dispatch(setMessage('File uploaded successfully.'));\n    }, 1500);\n  };\n\n  return (\n    <div className=\"card p-4\" style={{ borderRadius: '15px', backgroundColor: '#f8f9fa' }}>\n      <h4 className=\"text-center mb-3\">File Upload</h4>\n      <div className=\"mb-3\">\n        <input\n          type=\"file\"\n          className=\"form-control\"\n          onChange={handleFileChange}\n        />\n      </div>\n      <button\n        className=\"btn btn-primary w-100\"\n        onClick={handleFileUpload}\n      >\n        Upload File\n      </button>\n      {message && <div className=\"alert alert-info mt-3\">{message}</div>}\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}