{"ast":null,"code":"var _jsxFileName = \"/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'; // Make sure to import useDispatch\nimport { setParsedPdfData } from '../store/actions'; // Correct the import path if necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const dispatch = useDispatch(); // Initialize dispatch\n  const [file, setFile] = useState(null);\n  const handlePdfParse = file => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const typedArray = new Uint8Array(fileReader.result);\n      pdfjsLib.getDocument(typedArray).promise.then(pdf => {\n        pdf.getPage(1).then(page => {\n          page.getTextContent().then(textContent => {\n            let text = '';\n            textContent.items.forEach(item => {\n              text += item.str + ' ';\n            });\n\n            // Dispatch the extracted text to Redux\n            dispatch(setParsedPdfData(text)); // Ensure this dispatch is used here\n          });\n        });\n      }).catch(error => {\n        console.error('Error parsing PDF:', error);\n      });\n    };\n    fileReader.readAsArrayBuffer(file);\n  };\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      handlePdfParse(selectedFile);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"FqAtsX/Zm2UtiwCEPdcwRYrxMoY=\", false, function () {\n  return [useDispatch];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useDispatch","setParsedPdfData","jsxDEV","_jsxDEV","FileUpload","_s","dispatch","file","setFile","handlePdfParse","fileReader","FileReader","onload","typedArray","Uint8Array","result","pdfjsLib","getDocument","promise","then","pdf","getPage","page","getTextContent","textContent","text","items","forEach","item","str","catch","error","console","readAsArrayBuffer","handleFileChange","event","selectedFile","target","files","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';  // Make sure to import useDispatch\nimport { setParsedPdfData } from '../store/actions';  // Correct the import path if necessary\n\nconst FileUpload = () => {\n  const dispatch = useDispatch();  // Initialize dispatch\n  const [file, setFile] = useState(null);\n\n  const handlePdfParse = (file) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      const typedArray = new Uint8Array(fileReader.result);\n\n      pdfjsLib.getDocument(typedArray).promise\n        .then((pdf) => {\n          pdf.getPage(1).then((page) => {\n            page.getTextContent().then((textContent) => {\n              let text = '';\n              textContent.items.forEach(item => {\n                text += item.str + ' ';\n              });\n\n              // Dispatch the extracted text to Redux\n              dispatch(setParsedPdfData(text));  // Ensure this dispatch is used here\n            });\n          });\n        })\n        .catch((error) => {\n          console.error('Error parsing PDF:', error);\n        });\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  const handleFileChange = (event) => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      handlePdfParse(selectedFile);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa,CAAC,CAAE;AAC5C,SAASC,gBAAgB,QAAQ,kBAAkB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC,CAAC,CAAE;EACjC,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMU,cAAc,GAAIF,IAAI,IAAK;IAC/B,MAAMG,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;IAEnCD,UAAU,CAACE,MAAM,GAAG,MAAM;MACxB,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACJ,UAAU,CAACK,MAAM,CAAC;MAEpDC,QAAQ,CAACC,WAAW,CAACJ,UAAU,CAAC,CAACK,OAAO,CACrCC,IAAI,CAAEC,GAAG,IAAK;QACbA,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAAEG,IAAI,IAAK;UAC5BA,IAAI,CAACC,cAAc,CAAC,CAAC,CAACJ,IAAI,CAAEK,WAAW,IAAK;YAC1C,IAAIC,IAAI,GAAG,EAAE;YACbD,WAAW,CAACE,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;cAChCH,IAAI,IAAIG,IAAI,CAACC,GAAG,GAAG,GAAG;YACxB,CAAC,CAAC;;YAEF;YACAvB,QAAQ,CAACL,gBAAgB,CAACwB,IAAI,CAAC,CAAC,CAAC,CAAE;UACrC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CAAC;IACN,CAAC;IAEDrB,UAAU,CAACuB,iBAAiB,CAAC1B,IAAI,CAAC;EACpC,CAAC;EAED,MAAM2B,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,IAAIF,YAAY,EAAE;MAChB5B,OAAO,CAAC4B,YAAY,CAAC;MACrB3B,cAAc,CAAC2B,YAAY,CAAC;IAC9B;EACF,CAAC;EAED,oBACEjC,OAAA;IAAAoC,QAAA,eACEpC,OAAA;MAAOqC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEP;IAAiB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACxC,EAAA,CA7CID,UAAU;EAAA,QACGJ,WAAW;AAAA;AAAA8C,EAAA,GADxB1C,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}