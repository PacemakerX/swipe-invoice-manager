{"ast":null,"code":"var _jsxFileName = \"/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js\",\n  _s = $RefreshSig$();\n// components/FileUpload.js\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setInvoices, setProducts, setCustomers } from './store/actions'; // Adjust path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [file, setFile] = useState(null);\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setFile(file);\n  };\n  const handleFileUpload = () => {\n    // Simulating data extraction from file\n    const extractedData = extractData(file);\n\n    // Dispatch actions to update the Redux store\n    dispatch(setInvoices(extractedData.invoices));\n    dispatch(setProducts(extractedData.products));\n    dispatch(setCustomers(extractedData.customers));\n  };\n\n  // This is just a mock function to simulate data extraction\n  const extractData = file => {\n    // Replace with your actual file extraction logic\n    return {\n      invoices: [{\n        id: '001',\n        amount: 100,\n        date: '2023-11-01'\n      }, {\n        id: '002',\n        amount: 200,\n        date: '2023-11-02'\n      }],\n      products: [{\n        id: 'p1',\n        name: 'Product 1',\n        price: 50\n      }, {\n        id: 'p2',\n        name: 'Product 2',\n        price: 100\n      }],\n      customers: [{\n        id: 'c1',\n        name: 'Customer 1'\n      }, {\n        id: 'c2',\n        name: 'Customer 2'\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"FqAtsX/Zm2UtiwCEPdcwRYrxMoY=\", false, function () {\n  return [useDispatch];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useDispatch","setInvoices","setProducts","setCustomers","jsxDEV","_jsxDEV","FileUpload","_s","dispatch","file","setFile","handleFileChange","e","target","files","handleFileUpload","extractedData","extractData","invoices","products","customers","id","amount","date","name","price","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/sparsh/project/swipe-invoice-manager/src/components/FileUpload.js"],"sourcesContent":["// components/FileUpload.js\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setInvoices, setProducts, setCustomers } from './store/actions'; // Adjust path\n\nconst FileUpload = () => {\n  const dispatch = useDispatch();\n  const [file, setFile] = useState(null);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setFile(file);\n  };\n\n  const handleFileUpload = () => {\n    // Simulating data extraction from file\n    const extractedData = extractData(file);\n\n    // Dispatch actions to update the Redux store\n    dispatch(setInvoices(extractedData.invoices));\n    dispatch(setProducts(extractedData.products));\n    dispatch(setCustomers(extractedData.customers));\n  };\n\n  // This is just a mock function to simulate data extraction\n  const extractData = (file) => {\n    // Replace with your actual file extraction logic\n    return {\n      invoices: [\n        { id: '001', amount: 100, date: '2023-11-01' },\n        { id: '002', amount: 200, date: '2023-11-02' },\n      ],\n      products: [\n        { id: 'p1', name: 'Product 1', price: 50 },\n        { id: 'p2', name: 'Product 2', price: 100 },\n      ],\n      customers: [\n        { id: 'c1', name: 'Customer 1' },\n        { id: 'c2', name: 'Customer 2' },\n      ],\n    };\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleFileUpload}>Upload</button>\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,EAAEC,WAAW,EAAEC,YAAY,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMY,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMH,IAAI,GAAGG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BJ,OAAO,CAACD,IAAI,CAAC;EACf,CAAC;EAED,MAAMM,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,aAAa,GAAGC,WAAW,CAACR,IAAI,CAAC;;IAEvC;IACAD,QAAQ,CAACP,WAAW,CAACe,aAAa,CAACE,QAAQ,CAAC,CAAC;IAC7CV,QAAQ,CAACN,WAAW,CAACc,aAAa,CAACG,QAAQ,CAAC,CAAC;IAC7CX,QAAQ,CAACL,YAAY,CAACa,aAAa,CAACI,SAAS,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMH,WAAW,GAAIR,IAAI,IAAK;IAC5B;IACA,OAAO;MACLS,QAAQ,EAAE,CACR;QAAEG,EAAE,EAAE,KAAK;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAa,CAAC,EAC9C;QAAEF,EAAE,EAAE,KAAK;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAa,CAAC,CAC/C;MACDJ,QAAQ,EAAE,CACR;QAAEE,EAAE,EAAE,IAAI;QAAEG,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC1C;QAAEJ,EAAE,EAAE,IAAI;QAAEG,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAI,CAAC,CAC5C;MACDL,SAAS,EAAE,CACT;QAAEC,EAAE,EAAE,IAAI;QAAEG,IAAI,EAAE;MAAa,CAAC,EAChC;QAAEH,EAAE,EAAE,IAAI;QAAEG,IAAI,EAAE;MAAa,CAAC;IAEpC,CAAC;EACH,CAAC;EAED,oBACEnB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEjB;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjD3B,OAAA;MAAQ4B,OAAO,EAAElB,gBAAiB;MAAAW,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACzB,EAAA,CA5CID,UAAU;EAAA,QACGN,WAAW;AAAA;AAAAkC,EAAA,GADxB5B,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}